// Generated by Haxe 4.3.2
#include <hxcpp.h>

#ifndef INCLUDED_Main
#include <Main.h>
#endif
#ifndef INCLUDED_ScrollBar
#include <ScrollBar.h>
#endif
#ifndef INCLUDED_TabController
#include <TabController.h>
#endif
#ifndef INCLUDED_TabModel
#include <TabModel.h>
#endif
#ifndef INCLUDED_TabView
#include <TabView.h>
#endif
#ifndef INCLUDED_Xml
#include <Xml.h>
#endif
#ifndef INCLUDED__Xml_XmlType_Impl_
#include <_Xml/XmlType_Impl_.h>
#endif
#ifndef INCLUDED_haxe_xml__Access_Access_Impl_
#include <haxe/xml/_Access/Access_Impl_.h>
#endif
#ifndef INCLUDED_haxe_xml__Access_NodeAccess_Impl_
#include <haxe/xml/_Access/NodeAccess_Impl_.h>
#endif
#ifndef INCLUDED_haxe_xml__Access_NodeListAccess_Impl_
#include <haxe/xml/_Access/NodeListAccess_Impl_.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_MouseEvent
#include <openfl/events/MouseEvent.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_openfl_utils_Assets
#include <openfl/utils/Assets.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_e47a9afac0942eb9_18_new,"Main","new",0x6616a5cb,"Main.new","Main.hx",18,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_50_createTabButton,"Main","createTabButton",0x2cc4a176,"Main.createTabButton","Main.hx",50,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_33_createTabButton,"Main","createTabButton",0x2cc4a176,"Main.createTabButton","Main.hx",33,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_64_resetTabColors,"Main","resetTabColors",0x10fa028b,"Main.resetTabColors","Main.hx",64,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_73_initScrollBar,"Main","initScrollBar",0x917203c1,"Main.initScrollBar","Main.hx",73,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_78_loadTabsFromXml,"Main","loadTabsFromXml",0x6d452f14,"Main.loadTabsFromXml","Main.hx",78,0x087e5c05)

void Main_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_e47a9afac0942eb9_18_new)
HXLINE(  19)		super::__construct();
HXLINE(  21)		this->view =  ::TabView_obj::__alloc( HX_CTX );
HXLINE(  22)		this->addChild(this->view);
HXLINE(  24)		this->models = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  25)		this->controllers = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  26)		this->tabButtons = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  28)		this->initScrollBar();
HXLINE(  30)		this->loadTabsFromXml();
            	}

Dynamic Main_obj::__CreateEmpty() { return new Main_obj; }

void *Main_obj::_hx_vtable = 0;

Dynamic Main_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Main_obj > _hx_result = new Main_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Main_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0c89e854) {
		if (inClassId<=(int)0x07825a7d) {
			if (inClassId<=(int)0x0330636f) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
			} else {
				return inClassId==(int)0x07825a7d;
			}
		} else {
			return inClassId==(int)0x0c89e854;
		}
	} else {
		if (inClassId<=(int)0x4af7dd8e) {
			return inClassId==(int)0x1f4df417 || inClassId==(int)0x4af7dd8e;
		} else {
			return inClassId==(int)0x6b353933;
		}
	}
}

 ::openfl::display::Sprite Main_obj::createTabButton(::String label,Float x,Float width, ::TabController controller){
            		HX_BEGIN_LOCAL_FUNC_S4(::hx::LocalFunc,_hx_Closure_0, ::Main,_gthis, ::TabController,controller, ::openfl::display::Sprite,button,Float,width) HXARGC(1)
            		void _hx_run( ::openfl::events::MouseEvent e){
            			HX_GC_STACKFRAME(&_hx_pos_e47a9afac0942eb9_50_createTabButton)
HXLINE(  51)			_gthis->resetTabColors();
HXLINE(  52)			button->get_graphics()->clear();
HXLINE(  53)			button->get_graphics()->lineStyle(1,0,null(),null(),null(),null(),null(),null());
HXLINE(  54)			button->get_graphics()->beginFill(11522551,null());
HXLINE(  55)			button->get_graphics()->drawRect(( (Float)(0) ),( (Float)(0) ),width,( (Float)(20) ));
HXLINE(  56)			button->get_graphics()->endFill();
HXLINE(  57)			controller->tabClicked();
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_e47a9afac0942eb9_33_createTabButton)
HXDLIN(  33)		 ::Main _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(  34)		 ::openfl::display::Sprite button =  ::openfl::display::Sprite_obj::__alloc( HX_CTX );
HXLINE(  35)		button->get_graphics()->lineStyle(1,0,null(),null(),null(),null(),null(),null());
HXLINE(  36)		button->get_graphics()->beginFill(15264751,null());
HXLINE(  37)		button->get_graphics()->drawRect(( (Float)(0) ),( (Float)(0) ),width,( (Float)(20) ));
HXLINE(  38)		button->get_graphics()->endFill();
HXLINE(  40)		 ::openfl::text::TextField textField =  ::openfl::text::TextField_obj::__alloc( HX_CTX );
HXLINE(  41)		textField->set_text(label);
HXLINE(  42)		textField->set_width(width);
HXLINE(  43)		textField->set_height(( (Float)(20) ));
HXLINE(  44)		button->addChild(textField);
HXLINE(  46)		button->set_x(x);
HXLINE(  47)		button->set_y(( (Float)(10) ));
HXLINE(  48)		this->addChild(button);
HXLINE(  50)		button->addEventListener(HX_("click",48,7c,5e,48), ::Dynamic(new _hx_Closure_0(_gthis,controller,button,width)),null(),null(),null());
HXLINE(  60)		return button;
            	}


HX_DEFINE_DYNAMIC_FUNC4(Main_obj,createTabButton,return )

void Main_obj::resetTabColors(){
            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_64_resetTabColors)
HXDLIN(  64)		int _g = 0;
HXDLIN(  64)		::Array< ::Dynamic> _g1 = this->tabButtons;
HXDLIN(  64)		while((_g < _g1->length)){
HXDLIN(  64)			 ::openfl::display::Sprite tab = _g1->__get(_g).StaticCast<  ::openfl::display::Sprite >();
HXDLIN(  64)			_g = (_g + 1);
HXLINE(  65)			tab->get_graphics()->clear();
HXLINE(  66)			tab->get_graphics()->lineStyle(1,0,null(),null(),null(),null(),null(),null());
HXLINE(  67)			tab->get_graphics()->beginFill(15264751,null());
HXLINE(  68)			 ::openfl::display::Graphics _hx_tmp = tab->get_graphics();
HXDLIN(  68)			Float _hx_tmp1 = tab->get_width();
HXDLIN(  68)			_hx_tmp->drawRect(( (Float)(0) ),( (Float)(0) ),_hx_tmp1,tab->get_height());
HXLINE(  69)			tab->get_graphics()->endFill();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Main_obj,resetTabColors,(void))

void Main_obj::initScrollBar(){
            	HX_GC_STACKFRAME(&_hx_pos_e47a9afac0942eb9_73_initScrollBar)
HXLINE(  74)		this->scrollBar =  ::ScrollBar_obj::__alloc( HX_CTX ,this->view->textField);
HXLINE(  75)		this->addChild(this->scrollBar);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Main_obj,initScrollBar,(void))

void Main_obj::loadTabsFromXml(){
            	HX_GC_STACKFRAME(&_hx_pos_e47a9afac0942eb9_78_loadTabsFromXml)
HXLINE(  82)		::String xmlString = ::openfl::utils::Assets_obj::getText(HX_("img/tabs.xml",b3,28,cf,1f));
HXLINE(  83)		 ::Xml xmlData = ::Xml_obj::parse(xmlString);
HXLINE(  84)		 ::Xml x = xmlData->firstElement();
HXDLIN(  84)		bool _hx_tmp;
HXDLIN(  84)		if ((x->nodeType != ::Xml_obj::Document)) {
HXLINE(  84)			_hx_tmp = (x->nodeType != ::Xml_obj::Element);
            		}
            		else {
HXLINE(  84)			_hx_tmp = false;
            		}
HXDLIN(  84)		if (_hx_tmp) {
HXLINE(  84)			HX_STACK_DO_THROW((HX_("Invalid nodeType ",3b,e0,cb,e1) + ::_Xml::XmlType_Impl__obj::toString(x->nodeType)));
            		}
HXDLIN(  84)		 ::Xml fast = x;
HXLINE(  86)		int numTabs = 0;
HXLINE(  87)		{
HXLINE(  87)			int _g = 0;
HXDLIN(  87)			::Array< ::Dynamic> _g1 = ::haxe::xml::_Access::NodeListAccess_Impl__obj::resolve(fast,HX_("Tab",35,12,40,00));
HXDLIN(  87)			while((_g < _g1->length)){
HXLINE(  87)				 ::Xml _ = _g1->__get(_g).StaticCast<  ::Xml >();
HXDLIN(  87)				_g = (_g + 1);
HXLINE(  88)				numTabs = (numTabs + 1);
            			}
            		}
HXLINE(  91)		Float tabWidth = (this->view->textField->get_width() / ( (Float)(numTabs) ));
HXLINE(  92)		Float xPos = ( (Float)(10) );
HXLINE(  94)		{
HXLINE(  94)			int _g2 = 0;
HXDLIN(  94)			::Array< ::Dynamic> _g3 = ::haxe::xml::_Access::NodeListAccess_Impl__obj::resolve(fast,HX_("Tab",35,12,40,00));
HXDLIN(  94)			while((_g2 < _g3->length)){
HXLINE(  94)				 ::Xml tab = _g3->__get(_g2).StaticCast<  ::Xml >();
HXDLIN(  94)				_g2 = (_g2 + 1);
HXLINE(  95)				::String title = ::haxe::xml::_Access::Access_Impl__obj::get_innerData(::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(tab,HX_("Title",78,85,68,a3)));
HXLINE(  96)				::String content = ::haxe::xml::_Access::Access_Impl__obj::get_innerData(::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(tab,HX_("Content",19,b5,c8,e6)));
HXLINE(  98)				 ::TabModel model =  ::TabModel_obj::__alloc( HX_CTX ,title,content);
HXLINE(  99)				this->models->push(model);
HXLINE( 101)				 ::TabController controller =  ::TabController_obj::__alloc( HX_CTX ,model,this->view,::hx::ObjectPtr<OBJ_>(this));
HXLINE( 102)				this->controllers->push(controller);
HXLINE( 104)				 ::openfl::display::Sprite tabButton = this->createTabButton(title,xPos,tabWidth,controller);
HXLINE( 105)				this->tabButtons->push(tabButton);
HXLINE( 106)				xPos = (xPos + tabWidth);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Main_obj,loadTabsFromXml,(void))


::hx::ObjectPtr< Main_obj > Main_obj::__new() {
	::hx::ObjectPtr< Main_obj > __this = new Main_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< Main_obj > Main_obj::__alloc(::hx::Ctx *_hx_ctx) {
	Main_obj *__this = (Main_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Main_obj), true, "Main"));
	*(void **)__this = Main_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Main_obj::Main_obj()
{
}

void Main_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Main);
	HX_MARK_MEMBER_NAME(view,"view");
	HX_MARK_MEMBER_NAME(models,"models");
	HX_MARK_MEMBER_NAME(controllers,"controllers");
	HX_MARK_MEMBER_NAME(tabButtons,"tabButtons");
	HX_MARK_MEMBER_NAME(scrollBar,"scrollBar");
	 ::openfl::display::Sprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Main_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(view,"view");
	HX_VISIT_MEMBER_NAME(models,"models");
	HX_VISIT_MEMBER_NAME(controllers,"controllers");
	HX_VISIT_MEMBER_NAME(tabButtons,"tabButtons");
	HX_VISIT_MEMBER_NAME(scrollBar,"scrollBar");
	 ::openfl::display::Sprite_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val Main_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"view") ) { return ::hx::Val( view ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"models") ) { return ::hx::Val( models ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"scrollBar") ) { return ::hx::Val( scrollBar ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"tabButtons") ) { return ::hx::Val( tabButtons ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"controllers") ) { return ::hx::Val( controllers ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"initScrollBar") ) { return ::hx::Val( initScrollBar_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"resetTabColors") ) { return ::hx::Val( resetTabColors_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"createTabButton") ) { return ::hx::Val( createTabButton_dyn() ); }
		if (HX_FIELD_EQ(inName,"loadTabsFromXml") ) { return ::hx::Val( loadTabsFromXml_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Main_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"view") ) { view=inValue.Cast<  ::TabView >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"models") ) { models=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"scrollBar") ) { scrollBar=inValue.Cast<  ::ScrollBar >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"tabButtons") ) { tabButtons=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"controllers") ) { controllers=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Main_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("view",65,32,4f,4e));
	outFields->push(HX_("models",aa,10,c7,c0));
	outFields->push(HX_("controllers",57,f0,06,22));
	outFields->push(HX_("tabButtons",6c,44,4d,8c));
	outFields->push(HX_("scrollBar",c6,57,fc,3d));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Main_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::TabView */ ,(int)offsetof(Main_obj,view),HX_("view",65,32,4f,4e)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(Main_obj,models),HX_("models",aa,10,c7,c0)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(Main_obj,controllers),HX_("controllers",57,f0,06,22)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(Main_obj,tabButtons),HX_("tabButtons",6c,44,4d,8c)},
	{::hx::fsObject /*  ::ScrollBar */ ,(int)offsetof(Main_obj,scrollBar),HX_("scrollBar",c6,57,fc,3d)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Main_obj_sStaticStorageInfo = 0;
#endif

static ::String Main_obj_sMemberFields[] = {
	HX_("view",65,32,4f,4e),
	HX_("models",aa,10,c7,c0),
	HX_("controllers",57,f0,06,22),
	HX_("tabButtons",6c,44,4d,8c),
	HX_("scrollBar",c6,57,fc,3d),
	HX_("createTabButton",8b,d7,21,dc),
	HX_("resetTabColors",16,e6,43,82),
	HX_("initScrollBar",96,1a,fc,b8),
	HX_("loadTabsFromXml",29,65,a2,1c),
	::String(null()) };

::hx::Class Main_obj::__mClass;

void Main_obj::__register()
{
	Main_obj _hx_dummy;
	Main_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("Main",59,64,2f,33);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Main_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Main_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Main_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Main_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

