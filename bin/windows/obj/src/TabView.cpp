// Generated by Haxe 4.3.2
#include <hxcpp.h>

#ifndef INCLUDED_TabView
#include <TabView.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_openfl_text_TextFormat
#include <openfl/text/TextFormat.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_5cec11d1740194eb_11_new,"TabView","new",0x3052f52c,"TabView.new","TabView.hx",11,0x552ad3c4)
HX_LOCAL_STACK_FRAME(_hx_pos_5cec11d1740194eb_16_initializeTextField,"TabView","initializeTextField",0xb942a629,"TabView.initializeTextField","TabView.hx",16,0x552ad3c4)
HX_LOCAL_STACK_FRAME(_hx_pos_5cec11d1740194eb_32_update,"TabView","update",0x72ec68bd,"TabView.update","TabView.hx",32,0x552ad3c4)

void TabView_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_5cec11d1740194eb_11_new)
HXLINE(  12)		super::__construct();
HXLINE(  13)		this->initializeTextField();
            	}

Dynamic TabView_obj::__CreateEmpty() { return new TabView_obj; }

void *TabView_obj::_hx_vtable = 0;

Dynamic TabView_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< TabView_obj > _hx_result = new TabView_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool TabView_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0e637ab2) {
		if (inClassId<=(int)0x0c89e854) {
			if (inClassId<=(int)0x0330636f) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
			} else {
				return inClassId==(int)0x0c89e854;
			}
		} else {
			return inClassId==(int)0x0e637ab2;
		}
	} else {
		if (inClassId<=(int)0x4af7dd8e) {
			return inClassId==(int)0x1f4df417 || inClassId==(int)0x4af7dd8e;
		} else {
			return inClassId==(int)0x6b353933;
		}
	}
}

void TabView_obj::initializeTextField(){
            	HX_GC_STACKFRAME(&_hx_pos_5cec11d1740194eb_16_initializeTextField)
HXLINE(  17)		this->textField =  ::openfl::text::TextField_obj::__alloc( HX_CTX );
HXLINE(  18)		this->textField->set_x(( (Float)(10) ));
HXLINE(  19)		this->textField->set_y(( (Float)(30) ));
HXLINE(  20)		this->textField->set_width(( (Float)(580) ));
HXLINE(  21)		this->textField->set_height(( (Float)(400) ));
HXLINE(  22)		 ::openfl::text::TextField _hx_tmp = this->textField;
HXDLIN(  22)		_hx_tmp->set_defaultTextFormat( ::openfl::text::TextFormat_obj::__alloc( HX_CTX ,null(),16,null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null()));
HXLINE(  23)		this->textField->set_backgroundColor(15264751);
HXLINE(  24)		this->textField->set_background(true);
HXLINE(  25)		this->textField->set_border(true);
HXLINE(  26)		this->textField->set_borderColor(0);
HXLINE(  27)		this->textField->set_multiline(true);
HXLINE(  28)		this->textField->set_wordWrap(true);
HXLINE(  29)		this->addChild(this->textField);
            	}


HX_DEFINE_DYNAMIC_FUNC0(TabView_obj,initializeTextField,(void))

void TabView_obj::update(::String content){
            	HX_STACKFRAME(&_hx_pos_5cec11d1740194eb_32_update)
HXLINE(  33)		this->textField->set_text(content);
HXLINE(  34)		this->textField->set_background(true);
HXLINE(  35)		this->textField->set_backgroundColor(11522551);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TabView_obj,update,(void))


::hx::ObjectPtr< TabView_obj > TabView_obj::__new() {
	::hx::ObjectPtr< TabView_obj > __this = new TabView_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< TabView_obj > TabView_obj::__alloc(::hx::Ctx *_hx_ctx) {
	TabView_obj *__this = (TabView_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(TabView_obj), true, "TabView"));
	*(void **)__this = TabView_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

TabView_obj::TabView_obj()
{
}

void TabView_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TabView);
	HX_MARK_MEMBER_NAME(textField,"textField");
	 ::openfl::display::Sprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void TabView_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(textField,"textField");
	 ::openfl::display::Sprite_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val TabView_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"textField") ) { return ::hx::Val( textField ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"initializeTextField") ) { return ::hx::Val( initializeTextField_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val TabView_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"textField") ) { textField=inValue.Cast<  ::openfl::text::TextField >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TabView_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("textField",cd,24,81,99));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo TabView_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::openfl::text::TextField */ ,(int)offsetof(TabView_obj,textField),HX_("textField",cd,24,81,99)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *TabView_obj_sStaticStorageInfo = 0;
#endif

static ::String TabView_obj_sMemberFields[] = {
	HX_("textField",cd,24,81,99),
	HX_("initializeTextField",5d,29,70,b7),
	HX_("update",09,86,05,87),
	::String(null()) };

::hx::Class TabView_obj::__mClass;

void TabView_obj::__register()
{
	TabView_obj _hx_dummy;
	TabView_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("TabView",3a,2f,16,14);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(TabView_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< TabView_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TabView_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TabView_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

